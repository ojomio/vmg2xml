#!/usr/bin/python
# -*- coding: utf-8 -*-

import imdb
import transmissionrpc
import os, shutil, re, string

# TODO : Add support for movie extraction/move/link/whatever

# Global variable init
hostname    = 'gilgamesh.uruk.home'
port        = 9091
DownloadDir = '/data/misc_media/Torrents/Torrent Finished/'
TorrentId   = int(os.getenv('TR_TORRENT_ID'))
SeriesDir   = '/data/series/'
FilmsDir    = '/data/misc_media/Films/'

# Array of uneeded informations from name
Separator = ['multi', '720p', '1080p', 'x264', 'hdtv', 'bdrip', 'brrip', 'ac3', 'ogg', 'mpc', 'lossless', 'cbr', 'vbr', 'lame', 'eac', 'dvd-r', 'dvdrip', 'hdrip', 'mp3', 'subforced', 'hardsub', 'ts', 'tvrip', 'truefrench', 'vfq', 'vostfr', 'ntsc', 'pal', 'french', 'xvid', 'bluray', '3d', 'pox', 'hq', 'dts', 'fr', 'fr', 'fr', 'hd', 'mkv']
# movie extensions
MovieExt = ( 'mkv', 'avi', 'mp4', 'iso', 'wmv' )
MusicExt = ( 'mp3', 'flac', 'ogg' )

# Objects init

trans = transmissionrpc.Client(hostname, port=port)
imdb  = imdb.IMDb()


def Movie_or_Serie(Id):
    ''' This function permits to detect by the name of torrent if it is a movie
    or a serie.
    
    Parameters :
        Name -- string which contains torrent name.
        
    '''
    t = trans.info(Id)
    Name = t[Id].name
    # Try to detect sXXeYY format
    regexDetectSerie  = r'(?P<Name>.*)[Ss](?P<Season>\d{1,2})[Ee]\d{1,2}.*'
    detectSerie = re.search(regexDetectSerie, Name)
    # get files to detect others type than serie
    files = trans.get_files(TorrentId)
    for fileItem in files[TorrentId].values():
        if fileItem['name'].endswith(MovieExt):
            detectMovie = fileItem['name']
        elif fileItem['name'].endswith(MusicExt):
            detectMusic = Name

    if detectSerie:
        print(Name+' is a serie') 
        serieName     = detectSerie.group('Name')
        serieSeasonNb = int(detectSerie.group('Season'))
        # Format the serieName
        regexUneededCar  = r'[._-]'
        regexReplacedCar = r' '
        serieName        = re.sub(regexUneededCar, regexReplacedCar, serieName)
        serieName        = serieName.strip()
        print(serieName,serieSeasonNb)
        deployNewEpisode(serieName, serieSeasonNb)
    elif detectMovie:
        print(detectMovie+' is a movie')
        deployNewMovie(detectMovie)

def deployNewMovie(Name):
    '''Deploy new movie and try to set file name with title and years

    Parameters :
        Name -- Name of torrent file to deploy
    '''
    moviePath = Name

    # Get rid of directory in path filename
    movieFileName = re.sub(r'.*/(.*)$', r'\1', Name)

    # Extract Name, Years and extension then get rid of the rest
    # If movie doesn't have a year statement, then use the original file name
    extractor = re.search(r'^(?P<Name>.*)(?P<Year>(19|20)\d{2}).*(?P<Ext>\..*)$', movieFileName)
    try:
        onlyName = extractor.group('Name')
        onlyYear = extractor.group('Year')
        imdbResult = imdb.search_movie(onlyName + ' ' + onlyYear)
        movieName = imdbResult[0]['title'] + ' (' + onlyYear + ')' + extractor.group('Ext')
    except AttributeError:
        movieFileName = movieFileName.lower()
        extension = movieFileName.rpartition('.')[2]
        movieNameArray = []
        for sep in Separator:
            movieNameArray.append(movieFileName.partition(sep)[0])
        onlyName = str(min(movieNameArray).title()).translate(string.maketrans('._','  ')).strip()
        imdbResult = imdb.search_movie(onlyName)
        movieName = imdbResult[0]['title'] + ' (' + str(imdbResult[0]['year']) + ')' + extension

    print('Movie name is :' + movieName)
    source=DownloadDir+moviePath
    dest=FilmsDir+movieName
    try:
        os.link(source, dest)
    except OSError:
        shutil.copy(source, dest)

def deployNewEpisode(Title, Season):
    '''Deploy the new downloaded epidode to the correct path

    Parameters :
        Title -- Formatted Title of tv show.
        Season -- Season number

    '''
    seriePath   = SeriesDir+Title+'/'
    nbOfSeasons = sorted(os.listdir(seriePath))
    # Create directory if doesn't exists
    if len(nbOfSeasons) < Season:
        os.mkdir(seriePath+'Season '+str(Season))
        nbOfSeasons = sorted(os.listdir(seriePath))
    #We had to soustract 1 because list count beginning at 0
    print(nbOfSeasons[Season-1])
    os.chdir(seriePath+nbOfSeasons[Season-1])
    
    # Find rar file and decompress episode
    files = trans.get_files(TorrentId)
    for filename in files[TorrentId].values():
        if not re.search('sample', filename['name'], re.I):
            filetype = re.sub(r'.*(.{3})$', r'\1', filename['name'])
            if filetype == 'rar':
                print('It is an archive file. Ready to decompress!')
                Dir = re.sub(r'(\W)', r'\\\1', DownloadDir) 
                os.system('/usr/bin/unrar e '\
                        + Dir + filename['name'])
            elif filetype == 'mkv' or filetype == 'avi' or filetype == 'mp4':
                print('It is a regular file. Try to link it or copy it if failure.')
                try:
                    os.link(DownloadDir + '/'+filename['name'], seriePath+'/'+nbOfSeasons[Season-1]+'/'+filename['name'])
                except OSError:
                    shutil.copy(DownloadDir + '/'+filename['name'], seriePath+nbOfSeasons[Season-1])
            
# Main
Movie_or_Serie(TorrentId)
